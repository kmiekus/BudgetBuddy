@using System.Net.Http.Json
@using BudgetBuddy.Data
@using BudgetBuddy.Models
@inject IAiService AiService

<div class="chat-container">
    <div class="chat-messages">
        @foreach (var message in Messages)
        {
            <div class="message @(message.IsUser ? "user-message" : "ai-message")">
                @message.Content
            </div>
        }
    </div>

    <div class="chat-input">
        <input @bind="UserInput" @bind:event="oninput" placeholder="Zadaj pytanie o swój budżet..." @onkeydown="HandleKeyDown" />
        <button @onclick="SendMessage">Wyślij</button>
    </div>
</div>

@code {
    [Parameter]
    public IEnumerable<Transaction>? Transactions { get; set; }
    
    private List<ChatMessage> Messages = new();
    private string UserInput = "";


    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserInput)) return;

        Messages.Add(new ChatMessage { Content = UserInput, IsUser = true });
        var input = UserInput;
        UserInput = "";

        // Wyślij zapytanie do backendu z AI
        var aiReply = await AiService.AskAsync(GeneratePrompt(input));
        Messages.Add(new ChatMessage { Content = aiReply, IsUser = false });
    }

    // W AI prompt możesz uwzględnić transakcje, np. podsumować je w tekście:
    private string GeneratePrompt(string userMessage)
    {
        if (Transactions == null || !Transactions.Any())
            return userMessage;

        var summary = string.Join("\n", Transactions.Take(5).Select(t =>
            $"{t.Date:yyyy-MM-dd} - {t.Type}: {t.Amount} PLN ({t.Name})"));

        return $"Oto ostatnie transakcje użytkownika:\n{summary}\n\nPytanie: {userMessage}";
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private class ChatMessage
    {
        public string Content { get; set; } = "";
        public bool IsUser { get; set; }
    }
}
